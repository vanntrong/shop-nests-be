name: Docker Image CI

on:
  push:
    branches: ['main']

env:
  ECR_REGION: ap-southeast-1
  DOCKER_BUILDKIT: 1
  DOCKER_CONTAINER_NAME: shop-nests
  DOCKER_PORT: 80

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.ECR_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build the Docker image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: shop-nests
          IMAGE_TAG: ${{ github.sha }}
        run: docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG --build-arg SCRIPT_NAME=prod . && docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  pull-and-run:
    runs-on: self-hosted
    needs: build-and-push-image
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.ECR_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Pull Docker image from ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: shop-nests
          IMAGE_TAG: ${{ github.sha }}
        run: docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Stop Docker container
        run: docker stop $DOCKER_CONTAINER_NAME || true

      - name: Run Docker container
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: shop-nests
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker run -d -p 8080:80 --network shope-nest_db_network --name $DOCKER_CONTAINER_NAME $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Remove Docker image
        run: docker image rm $REGISTRY/$REPOSITORY:$IMAGE_TAG
